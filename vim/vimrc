" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype on                  " required

" set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()

call plug#begin('~/.vim/plugged')


" disable matching paren highlighting
let loaded_matchparen = 1

" Plug 'vim-addon-mw-utils'

" " Git plugin not hosted on GitHub
" Plug 'git://git.wincent.com/command-t.git'
"
" " git repos on your local machine (i.e. when working on your own plugin)
" Plug 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
" " Avoid a name conflict with L9
" Plug 'user/L9', {'name': 'newL9'}


Plug 'Valloric/YouCompleteMe', {'do': 'python3 install.py'}

Plug 'tpope/vim-abolish'  " lets you find, substitute and addreviate several variations of a word + case coercion
Plug 'tpope/vim-commentary'  " gc, gcc and gcu commands for (un)commenting code
Plug 'tpope/vim-dispatch'  " invokes make builds in foreground
Plug 'tpope/vim-fugitive'  " git wrapper for vim
Plug 'tpope/vim-ragtag'  " input mode bindings for html/xml
Plug 'tpope/vim-repeat'  " repeat last entered commands via . or @
Plug 'tpope/vim-sensible'  " sensible vim defaults
Plug 'tpope/vim-surround'  " surround selection with quotes, braces; also swap surroundings
Plug 'tpope/vim-obsession'  " automatic session saving

Plug 'groenewege/vim-less'  " syntax highlighting for LESS (CSS preprocessor)
Plug 'tommcdo/vim-lion'  " align lines to certain symbol
Plug 'AndrewRadev/splitjoin.vim'  " gS and gJ mapping for splitting/joining selected text
Plug 'vim-scripts/matchit.zip'  " match braces, if/elif/else constructs, etc. with % command
Plug 'Vimjas/vim-python-pep8-indent'  " PEP8 indentation for python

Plug 'vim-scripts/python_match.vim'  " cycle through python's if/then/else
Plug 'AndrewRadev/sideways.vim'  "swapping function arguments

" Doesn't work well with YouCompleteMe
" Plug 'jmcantrell/vim-virtualenv'

" Plug 'vim-scripts/snipMate'
Plug 'SirVer/ultisnips'  " snippet management
Plug 'honza/vim-snippets'  " additional snippets for various programming languages (snipMate and UltiSnip)

Plug 'scrooloose/nerdtree'  " sidebar with directory structure
Plug 'ivalkeen/nerdtree-execute'  " execute NERDTree menu items (via m -> x buttons on item)
Plug 'Xuyuanp/nerdtree-git-plugin'  " shows git status flags
" Plug 'jistr/vim-nerdtree-tabs'

Plug 'vim-scripts/tabular'      " line up text to a certain symbol
Plug 'junegunn/vim-easy-align'  " simpler alignment plugin
"Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }  " installs command-line fuzzy finder
Plug 'vim-scripts/a.vim'  " quickly alternate files (.c --> .h etc)
Plug 'vim-scripts/L9'  " some utility functions for programming in vim; I probably don't need it

Plug 'vim-syntastic/syntastic'  " runs code through external syntax checkers and displays errors
Plug 'posva/vim-vue'  " syntax highlight for Vue.js components

Plug 'justinmk/vim-sneak'  " jump to any location specified by 's', followed by two characters
Plug 'majutsushi/tagbar'  " lets you browse tags of the current file and get overview of its structure
Plug 'mhinz/vim-signify'  " shows added, modified and removed lines in a separate column
Plug 'tyru/open-browser.vim'  " Open URI with your favorite browser
Plug 'tomasr/molokai'  " molokai color scheme for vim
Plug 'flazz/vim-colorschemes'  " color schemes for vim

Plug 'sloria/vim-ped'  " opens python modules based on python import paths; requires ped package

" Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline'  " status/tabline for vim
Plug 'vim-airline/vim-airline-themes'  " themes for vim-airline
" Plug 'bling/vim-bufferline'
Plug 'powerline/fonts', {'do': './install.sh'}  " patched fonts for airline/powerline

Plug 'vim-scripts/summerfruit256.vim'  " summerfruit color scheme
Plug 'xolox/vim-misc'  " core dependencies for xolox-written vim plugins
Plug 'xolox/vim-colorscheme-switcher'  " makes it easy to switch between vim colorschemes

Plug 'kana/vim-arpeggio'  " mappings for simultaneously pressed keys

Plug 'christoomey/vim-tmux-navigator'  " Allows you to jump between vim/tmux windows with ctrl-hjkl
Plug 'benmills/vimux'  " easily interact with tmux from vim

call plug#end()

" runtime! pluggin/vim-sensible/

" All of your Plugins must be added before the following line
" call vundle#end()            " required

" let g:snippets_dir='~/.vim/vim-snippets/snippets'

let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10

" nmap <F9> :Next

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" execute pathogen#infect()
" call pathogen#helptags()

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
runtime! ftplugin/man.vim

" default tab config
set tabstop=4
set shiftwidth=4
set expandtab
" set softtabstop=4

set smartcase
filetype indent on
" set smarttab
set nu

set tags+=~/.vim/systags
autocmd BufEnter * silent! lcd %:p:h

set backupdir=./.backup,.,/tmp
set directory=.,./.backup,/tmp

" colorscheme github
colorscheme hemisu


let g:airline_theme='papercolor'

" let g:airline_theme='solarized'
let g:airline_powerline_fonts = 1

" disable errors and warnings in airline
let g:airline_section_warning = ''
let g:airline_section_error = ''

" show tabline
let g:airline#extensions#tabline#enabled = 1

" always show tabline
let g:airline#extensions#tabline#tab_min_count = 0

" if the filename is unique, show only its name; if some files share the same name, show directory as well 
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'


" filename + extension :help filename-modifiers
let g:airline#extensions#tabline#fnamemod = ':t'


" hide "X" icon for mouse closing
let g:airline#extensions#tabline#show_close_button = 0

" hide tab separator
let g:airline#extensions#tabline#left_alt_sep = ''

" disable tagbar
let g:airline#extensions#tagbar#enabled = 0

" show tab number 
let g:airline#extensions#tabline#show_tab_nr = 0

" show only tab number 
let g:airline#extensions#tabline#tab_nr_type = 1

" show buffers
let g:airline#extensions#tabline#show_buffers = 1

" show buffer number
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:ycm_python_binary_path = 'python3'
let g:ycm_server_python_interpreter = 'python3'

let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" let g:syntastic_python_checkers = ['pylint']

" Ignored flake8 errors:
" E221: multiple spaces before operator (to allow prettier alignment)
" E226: missing whitespace around arithmetic operator
" E241: multiple spaces after ',' (to allow pretty alignment to commas)
" E251: unexpected spaces around keyword/parameter equals
" E272: multiple spaces before keyword (to allow prettier alignment)
let g:syntastic_python_flake8_post_args='--ignore=E221,E226,E241,E272'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0 " Removes annoying window; default is 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" by default CtrlP searches files by full path, thus if query "repo" with the
" following directory structure:
"  project/src/Repository/Repository.php
"  project/src/Repository/Foo.php
"  CtrlP may give preference to Foo.php. To solve this:
let g:ctrlp_by_filename = 1

"  Where to start search from. w - nearest directory which contains CVS 
" (.git, .svn), r - current directory (pwd)
let g:ctrlp_working_path_mode = 'wr'

" CtrlP map
" let g:ctrlp_map = ''

" denotes whether bufferline should automatically echo to the command bar
let g:bufferline_echo = 1


" the separator used on the left side of a buffer
" let g:bufferline_active_buffer_left = '['
" the separator used on the right side of a buffer
" let g:bufferline_active_buffer_right = ']'

" the symbol to denote that a buffer is modified
" let g:bufferline_modified = '+'

" denotes whether buffer numbers should be displayed
let g:bufferline_show_bufnr = 1

" denotes whether the bufferline should have rotation applied
" default, no rotate, no scrolling
" let g:bufferline_rotate = 0

" scrolling with fixed current buffer position
let g:bufferline_rotate = 1

" scrolling without fixed current buffer position
" let g:bufferline_rotate = 2

" only valid when `g:bufferline_rotate` is set to 1:
let g:bufferline_fixed_index =  0 "always first
" let g:bufferline_fixed_index =  1 "always second (default)
" let g:bufferline_fixed_index = -1 "always last

" denotes how to display the filename of a buffer (see |filename-modifiers|
" for more details)
let g:bufferline_fname_mod = ':t'

" denotes the highlight group for inactive buffers when used in the
" |statusline|
let g:bufferline_inactive_highlight = 'StatusLineNC'

" denotes the highlight group for the active buffer when used in the
" |statusline|
let g:bufferline_active_highlight = 'StatusLine'

" denotes whether the active highlight should be used when there is only one
" buffer.
let g:bufferline_solo_highlight = 0

" denotes any exclude patterns.
let g:bufferline_excludes = [] "see source for defaults

" denotes whether paths in buffer names should be |pathshorten()|-ed.
let g:bufferline_pathshorten = 0

let g:colorscheme_switcher_define_mappings = 0

" privilege elevation
cmap w!! %!sudo tee > /dev/null %
nmap <F8> :TagbarToggle<CR>

call arpeggio#map('i', '', 0, 'jk', '<Esc>')
call arpeggio#map('ci', '', 0, 'ho', '~/')

" Vimux commands
call arpeggio#map('n', '', 0, 'vc', ':VimuxPromptCommand<CR>')
call arpeggio#map('n', '', 0, 'vl', ':VimuxRunLastCommand<CR>')
call arpeggio#map('n', '', 0, 'vi', ':VimuxInspectRunner<CR>')
call arpeggio#map('n', '', 0, 'vz', ':VimuxZoomRunner<CR>')

" Tab pages commands
call arpeggio#map('n', '', 0, 'te', ':tabe<CR>') " Create new tab
call arpeggio#map('n', '', 0, 'to', ':tabo<CR>') " Close all other tab pages
call arpeggio#map('n', '', 0, 'tn', ':tabn<CR>')
call arpeggio#map('n', '', 0, 'tp', ':tabp<CR>')

call arpeggio#map('n', '', 0, 'ne', ':NERDTreeToggle<CR>') " Open NERDTRee
call arpeggio#map('n', '', 0, 'nf', ':NERDTreeFocus<CR>') " Close NERDTRee
" 
" syntax highlighting for Django templates
call arpeggio#map('n', '', 0, 'dj', ':setfiletype htmldjango<CR>')

call arpeggio#map('n', '', 0, 'sh', ':SidewaysLeft<CR>') " Close NERDTRee
call arpeggio#map('n', '', 0, 'sl', ':SidewaysRight<CR>') " Close NERDTRee

nnoremap <F5> :PrevColorScheme<CR>
nnoremap <F6> :NextColorScheme<CR>

" simplify window changing
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
"
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" default behaviour splits to up and left, which is confusing
set splitbelow
set splitright

set directory=
set directory=~/.vim_swap//
set backupdir=
set backupdir=~/.vim_backup//
